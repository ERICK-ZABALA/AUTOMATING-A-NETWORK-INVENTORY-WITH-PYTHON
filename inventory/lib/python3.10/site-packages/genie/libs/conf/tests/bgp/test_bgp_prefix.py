#!/usr/bin/env python

import collections
import types
import unittest
from unittest.mock import Mock

from genie.conf import Genie

from genie.libs.conf.address_family import AddressFamily
from genie.libs.conf.base import MAC, IPv4Address, IPv6Address, IPv4Network
from genie.libs.conf.base import RouteDistinguisher
from genie.libs.conf.bgp import BgpIpv4UnicastRoute
from genie.libs.conf.bgp import BgpL2vpnEvpnRoute
from genie.libs.conf.evpn import ESI


class test_bgp_ipv4_unicast_route(unittest.TestCase):

    def test_init(self):

        rte_min = BgpIpv4UnicastRoute('0.0.0.0/0')
        rte_max = BgpIpv4UnicastRoute('255.255.255.255/32')

        rte = BgpIpv4UnicastRoute('1.2.3.4')
        self.assertIs(rte.af, AddressFamily.ipv4_unicast)
        self.assertEqual(rte.type, rte.Type.ip)
        self.assertEqual(rte.ip, IPv4Address('1.2.3.4'))
        self.assertEqual(rte.ip_network, IPv4Network('1.2.3.4/32'))
        self.assertEqual(rte.prefix_length, 32)
        self.assertEqual(str(rte), '1.2.3.4/32')
        rte2 = BgpIpv4UnicastRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpIpv4UnicastRoute('1.2.3.0/24')
        self.assertIs(rte.af, AddressFamily.ipv4_unicast)
        self.assertEqual(rte.type, rte.Type.ip)
        self.assertEqual(rte.ip, IPv4Address('1.2.3.0'))
        self.assertEqual(rte.prefix_length, 24)
        self.assertEqual(rte.ip_network, IPv4Network('1.2.3.0/24'))
        self.assertEqual(str(rte), '1.2.3.0/24')
        rte2 = BgpIpv4UnicastRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

class test_bgp_l2vpn_evpn_route(unittest.TestCase):

    def test_init(self):

        rte_min = BgpL2vpnEvpnRoute('[1][0.0.0.0.0][0]')
        rte_max = BgpL2vpnEvpnRoute('[5][65535][128][ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff]')

        rte = BgpL2vpnEvpnRoute('[1][1.2.3.4.5][3]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ethernet_ad)
        self.assertEqual(rte.esi, ESI('0.1.0.2.0.3.0.4.0.5'))
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 0)
        self.assertEqual(rte.ip, None)
        self.assertEqual(rte.prefix_length, 120)
        self.assertEqual(str(rte), '[1][0001.0002.0003.0004.0005][3]/120')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[1][100:1][1.2.3.4.5][3]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ethernet_ad)
        self.assertEqual(rte.esi, ESI('0.1.0.2.0.3.0.4.0.5'))
        self.assertEqual(rte.rd, RouteDistinguisher('100:1'))
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 0)
        self.assertEqual(rte.ip, None)
        self.assertEqual(rte.prefix_length, 184)
        self.assertEqual(str(rte), '[1][100:1][0001.0002.0003.0004.0005][3]/184')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[2][3][48][a.b.c][0]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.mac)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 48)
        self.assertEqual(rte.mac, MAC('a.b.c'))
        self.assertEqual(rte.ip_length, 0)
        self.assertEqual(rte.ip, None)
        self.assertEqual(rte.prefix_length, 104)
        self.assertEqual(str(rte), '[2][3][48][000a.000b.000c][0]/104')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[2][3][48][a.b.c][32][1.2.3.4]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.mac)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 48)
        self.assertEqual(rte.mac, MAC('a.b.c'))
        self.assertEqual(rte.ip_length, 32)
        self.assertEqual(rte.ip, IPv4Address('1.2.3.4'))
        self.assertEqual(rte.prefix_length, 136)
        self.assertEqual(str(rte), '[2][3][48][000a.000b.000c][32][1.2.3.4]/136')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[2][3][48][a.b.c][128][1::2]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.mac)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 48)
        self.assertEqual(rte.mac, MAC('a.b.c'))
        self.assertEqual(rte.ip_length, 128)
        self.assertEqual(rte.ip, IPv6Address('1::2'))
        self.assertEqual(rte.prefix_length, 232)
        self.assertEqual(str(rte), '[2][3][48][000a.000b.000c][128][1::2]/232')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[3][3][32][1.2.3.4]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.inclusive_multicast)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 32)
        self.assertEqual(rte.ip, IPv4Address('1.2.3.4'))
        self.assertEqual(rte.prefix_length, 80)
        self.assertEqual(str(rte), '[3][3][32][1.2.3.4]/80')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[3][3][128][1::2]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.inclusive_multicast)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 128)
        self.assertEqual(rte.ip, IPv6Address('1::2'))
        self.assertEqual(rte.prefix_length, 176)
        self.assertEqual(str(rte), '[3][3][128][1::2]/176')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[4][1.2.3.4.5]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ethernet_segment)
        self.assertEqual(rte.esi, ESI('0.1.0.2.0.3.0.4.0.5'))
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, None)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 0)
        self.assertEqual(rte.ip, None)
        self.assertEqual(rte.prefix_length, 88)
        self.assertEqual(str(rte), '[4][0001.0002.0003.0004.0005]/88')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[4][1.2.3.4.5][32][1.2.3.4]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ethernet_segment)
        self.assertEqual(rte.esi, ESI('0.1.0.2.0.3.0.4.0.5'))
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, None)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 32)
        self.assertEqual(rte.ip, IPv4Address('1.2.3.4'))
        self.assertEqual(rte.prefix_length, 120)
        self.assertEqual(str(rte), '[4][0001.0002.0003.0004.0005][32][1.2.3.4]/120')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[4][1.2.3.4.5][128][1::2]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ethernet_segment)
        self.assertEqual(rte.esi, ESI('0.1.0.2.0.3.0.4.0.5'))
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, None)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 128)
        self.assertEqual(rte.ip, IPv6Address('1::2'))
        self.assertEqual(rte.prefix_length, 216)
        self.assertEqual(str(rte), '[4][0001.0002.0003.0004.0005][128][1::2]/216')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[5][3][32][1.2.3.4]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ip)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 32)
        self.assertEqual(rte.ip, IPv4Address('1.2.3.4'))
        self.assertEqual(rte.prefix_length, 80)
        self.assertEqual(str(rte), '[5][3][32][1.2.3.4]/80')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[5][3][24][1.2.3.0]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ip)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 24)
        self.assertEqual(rte.ip, IPv4Address('1.2.3.0'))
        self.assertEqual(rte.prefix_length, 80)
        self.assertEqual(str(rte), '[5][3][24][1.2.3.0]/80')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

        rte = BgpL2vpnEvpnRoute('[5][3][128][1::2]')
        self.assertIs(rte.af, AddressFamily.l2vpn_evpn)
        self.assertEqual(rte.type, rte.Type.ip)
        self.assertEqual(rte.esi, None)
        self.assertEqual(rte.rd, None)
        self.assertEqual(rte.eth_tag, 3)
        self.assertEqual(rte.mac_length, 0)
        self.assertEqual(rte.mac, None)
        self.assertEqual(rte.ip_length, 128)
        self.assertEqual(rte.ip, IPv6Address('1::2'))
        self.assertEqual(rte.prefix_length, 176)
        self.assertEqual(str(rte), '[5][3][128][1::2]/176')
        rte2 = BgpL2vpnEvpnRoute(rte)
        self.assertEqual(rte, rte2)
        self.assertTrue(rte_min < rte < rte_max)
        self.assertFalse(rte != rte2)

if __name__ == '__main__':
    unittest.main()

